"""
Django settings for skillproof project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from django.conf import settings
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l*2ayj1r^vqdq9=bq+%_s3ich$@_7%-@%74e)o+7ix+6+lt-no'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '172.166.222.31', 'waitress.invalid', 'skillproof.me.ke', 'api.skillproof.me.ke', 'www.skillproof.me.ke']


# For development: Allow all origins (not recommended for production)
CORS_ALLOW_ALL_ORIGINS = True

# OR, for more control, allow specific origins with a regex for dynamic ports
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000',  # Django backend
    'http://127.0.0.1:8000',
    'http://172.166.222.31:8000',
    "http://localhost:3000",  # React frontend default port
    'http://waitress.invalid:8000',
    'https://skillproof.me.ke',
    'https://www.skillproof.me.ke',
    'https://api.skillproof.me.ke'
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r'^http://localhost:\d+$',  # Matches localhost with any port (e.g., localhost:51839)
    r'^http://127.0.0.1:\d+$',  # Matches 127.0.0.1 with any port
]

# Optional: Allow specific headers and methods
CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
]
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Application definition

INSTALLED_APPS = [
    'admin_interface',        
    'colorfield',
    'django.contrib.admin',
    'corsheaders',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # For building the REST API endpoints
    'rest_framework.authtoken',  # For token-based authentication
    'users',           # Manages users, roles, profiles, and email domain validations
    'companies',       # Manages companies, their users, and subscription plans
    'challenges',      # Manages challenges, tasks, categories, and attachments
    'submissions',     # Manages user submissions, files, and reviews
    'evaluations',     # Manages evaluation rubrics, scores, and logs
    'badges',          # Manages badges and user-badge assignments
    'portfolio',       # Manages user portfolios and items
    'recruiters',      # Manages recruiter searches, shortlists, and contact requests
    'mentors',         # Manages mentor assignments and sessions
    'notifications',   # Manages notifications and device tokens
    'payments',        # Manages subscription plans, subscriptions, and transactions (optional for MVP)
    'analytics',       # Manages challenge and user analytics
    'universities',    # Manages universities, their users, and student enrollments (optional)
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'skillproof.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'skillproof.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {

    
    # PostgreSQL database
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'skillproof_db',
        'USER': 'postgres',
        'PASSWORD': 'Es@91419271',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Optional, if you have app-level static files
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')    # For collectstatic


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'users.CustomUser'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default backend for email/password authentication
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}